import { assign } from "xstate"

const entryCombat = ({ context: { bot } }) => {
  console.log('‚öîÔ∏è –í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ COMBAT')

  bot.armorManager.equipAll() // –ë–æ—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±—Ä–æ–Ω–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–æ—Ä–µ –Ω–∞–¥–µ–Ω–µ—Ç –µ—ë

  if (bot.movements) {
    bot.movements.allowSprinting = true // –†–∞–∑—Ä–µ—à–∞–µ–º –±–æ—Ç—É –±–µ–∂–∞—Ç—å        
  }
}

const entryDeciding = ({ context }) => {
  console.log('‚öîÔ∏è –í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DECIDING')
}

const entryFleeing = ({ context, event }) => {
  console.log('üèÉ –í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FLEEING - —É–±–µ–≥–∞—é –∏ –ª–µ—á—É—Å—å!')
  const { bot, nearestEnemy } = context

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞—Ç–∞–∫–∏
  bot.pvp.stop()
  bot.hawkEye.stop()

  // –ù–∞—á–∏–Ω–∞–µ–º –µ—Å—Ç—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
  if (bot.utils.getAllFood().length > 0) {
    console.log('üçñ –ù–∞—á–∏–Ω–∞—é –ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –µ–¥—É')
    bot.utils.eating()
  } else {
    console.log('‚ö†Ô∏è –ù–µ—Ç –µ–¥—ã –¥–ª—è –ª–µ—á–µ–Ω–∏—è!')
  }

  // –£–±–µ–≥–∞–µ–º –æ—Ç –≤—Ä–∞–≥–∞
  if (nearestEnemy?.entity && nearestEnemy.entity.isValid) {
    const enemy = nearestEnemy.entity
    const botPos = bot.entity.position
    const enemyPos = enemy.position

    // –í—ã—á–∏—Å–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç –≤—Ä–∞–≥–∞
    const direction = botPos.clone().subtract(enemyPos).normalize()

    // –¢–æ—á–∫–∞ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 20 –±–ª–æ–∫–æ–≤ –æ—Ç –≤—Ä–∞–≥–∞ –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    const fleeTarget = botPos.clone().add(direction.scaled(20))

    console.log(`üèÉ –£–±–µ–≥–∞—é –æ—Ç ${enemy.name || enemy.displayName} –≤ —Ç–æ—á–∫—É (${fleeTarget.x.toFixed(1)}, ${fleeTarget.y.toFixed(1)}, ${fleeTarget.z.toFixed(1)})`)

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GoalNear –Ω–∞ –ª–µ—Ç—É
    const pathFinderPkg = require('mineflayer-pathfinder')
    const { goals } = pathFinderPkg

    // –î–≤–∏–≥–∞–µ–º—Å—è –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç–æ—á–∫–µ
    bot.pathfinder.setGoal(new goals.GoalNear(
      Math.floor(fleeTarget.x),
      Math.floor(fleeTarget.y),
      Math.floor(fleeTarget.z),
      1
    ), true)

    if (bot.movements) {
      bot.movements.allowSprinting = true // –°–ø—Ä–∏–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–±–µ–≥–∞–Ω–∏—è
    }
  }
}

const entryDefenging = ({ context, event }) => {
  console.log('‚öîÔ∏è –í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DEFENDING')
}

const entryMeleeAttacking = ({ context: { bot, nearestEnemy }, event }) => {
  console.log('‚öîÔ∏è –í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ MELEE_ATTACKING')
  const { entity } = nearestEnemy

  if (!entity || !entity?.isValid) {
    console.log('‚öîÔ∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –¥–ª—è –∞—Ç–∞–∫–∏')
    return
  }

  const meleeWeapon = bot.utils.getMeleeWeapon() // –ø–æ–∏—Å–∫ –æ—Ä—É–∂–∏—è –º–µ—á/—Ç–æ–ø–æ—Ä

  if (meleeWeapon) {
    console.log(`üó°Ô∏è –≠–∫–∏–ø–∏—Ä–æ–≤–∞–ª –æ—Ä—É–∂–∏–µ: ${meleeWeapon.name}`)
    bot.equip(meleeWeapon, 'hand')
  } else {
    console.log('üó°Ô∏è –ù–µ—Ç –æ—Ä—É–∂–∏—è –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è‚ùó')
  }

  console.log(`‚öîÔ∏è –ê—Ç–∞–∫—É—é ${entity.name || entity.displayName}`)
  bot.pvp.attack(entity)
}

const entryRangedAttacking = ({ context: { bot, nearestEnemy }, event }) => {
  console.log('‚öîÔ∏è –í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RANGED_ATTACKING')
  const { entity } = nearestEnemy

  if (!entity || !entity?.isValid) {
    console.log('üèπ –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã')
    return
  }

  console.log(`üèπ –ù–∞—á–∏–Ω–∞—é –¥–∞–ª—å–Ω–∏–π –±–æ–π —Å ${entity.name || entity.displayName}`)

  const weapon = bot.utils.getRangeWeapon() // –ø–æ–∏—Å–∫ –æ—Ä—É–∂–∏—è –ª—É–∫/–∞—Ä–±–∞–ª–µ—Ç
  const arrows = bot.utils.getArrow()

  if (weapon && arrows) {
    bot.equip(weapon, 'hand')
    console.log(`üèπ –≠–∫–∏–ø–∏—Ä–æ–≤–∞–ª: ${weapon.name}`)
    bot.hawkEye.autoAttack(entity, weapon.name)
  }
}

export default {
  entryCombat,
  entryDeciding,
  entryFleeing,
  entryDefenging,
  entryMeleeAttacking,
  entryRangedAttacking,
}