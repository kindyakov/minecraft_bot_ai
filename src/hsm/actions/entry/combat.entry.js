import { raise } from "xstate"
import { GoalXZ, GoalFollow, GoalNear } from "../../../modules/plugins/goals.js"

const entryCombat = ({ context: { bot } }) => {
  try {
    console.log('‚öîÔ∏è –í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ COMBAT')

    bot.armorManager.equipAll() // –ë–æ—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±—Ä–æ–Ω–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–æ—Ä–µ –Ω–∞–¥–µ–Ω–µ—Ç –µ—ë

    if (bot.movements) {
      bot.movements.allowSprinting = true // –†–∞–∑—Ä–µ—à–∞–µ–º –±–æ—Ç—É –±–µ–∂–∞—Ç—å        
    }

  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤ —Ö–æ–¥–µ –≤ COMBAT', error)
  }
}

const entryDeciding = ({ context }) => {
  console.log('ü§î‚öîÔ∏è –í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DECIDING')
}

const entryFleeing = ({ context, event }) => {
  console.log('üèÉ –í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FLEEING - —É–±–µ–≥–∞—é –∏ –ª–µ—á—É—Å—å!')
  const { bot, nearestEnemy, preferences } = context

  if (bot.movements) {
    bot.movements.allowSprinting = true
  }

  const botPos = bot.entity.position
  const player = bot.utils.searchPlayer()
  const hasFood = bot.utils.getAllFood().length > 0

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–Ω–æ –ª–∏ —É–±–µ–∂–∞—Ç—å –∫ –∏–≥—Ä–æ–∫—É
  const canFleeToPlayer = (enemy) => {
    if (!player) return false

    const playerToEnemyDist = player.position.distanceTo(enemy.position)
    const playerToBotDist = player.position.distanceTo(botPos)

    return playerToEnemyDist > preferences.safePlayerDistance
      && playerToBotDist <= preferences.fleeToPlayerRadius
  }

  // –£–±–µ–≥–∞–Ω–∏–µ –æ—Ç –≤—Ä–∞–≥–∞
  const fleeFromEnemy = (enemy) => {
    const enemyPos = enemy.position
    const direction = botPos.clone().subtract(enemyPos).normalize()
    const fleeTarget = botPos.clone().add(direction.scaled(preferences.fleeTargetDistance))

    console.log(`üèÉ –£–±–µ–≥–∞—é –æ—Ç ${enemy.name || enemy.displayName} –≤ —Ç–æ—á–∫—É (${fleeTarget.x.toFixed(1)}, ${fleeTarget.y.toFixed(1)}, ${fleeTarget.z.toFixed(1)})`)

    bot.pathfinder.setGoal(new GoalXZ(
      Math.floor(fleeTarget.x),
      Math.floor(fleeTarget.z),
    ))
  }

  // –£–±–µ–≥–∞–Ω–∏–µ –∫ –∏–≥—Ä–æ–∫—É
  const fleeToPlayer = () => {
    console.log(`üèÉ‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è –ë–æ—Ç –±–µ–∂–∏—Ç –∫ –∏–≥—Ä–æ–∫—É "${player.username}"`)
    bot.chat(`–ë–µ–≥—É –∫ ${player.username}, –≤—ã—Ä—É—á–∞–π!`)
    bot.pathfinder.setGoal(new GoalNear(
      player.position.x,
      player.position.y,
      player.position.z,
      3
    ))
  }

  // –ù–µ—Ç –µ–¥—ã - –≤—Å—ë —Ä–∞–≤–Ω–æ —É–±–µ–≥–∞–µ–º
  if (!hasFood) {
    bot.chat('–ê–ê–ê–ê–ê! –ù–µ—Ç –µ–¥—ã, –∑–∞ –º–Ω–æ–π –±–µ–≥—É—Ç !!!')
    console.log('‚ö†Ô∏è –ù–µ—Ç –µ–¥—ã –¥–ª—è –ª–µ—á–µ–Ω–∏—è!')

    if (nearestEnemy?.entity?.isValid) {
      fleeFromEnemy(nearestEnemy.entity)
    }
    return
  }

  // –ï—Å—Ç—å –µ–¥–∞ - —Ä–µ—à–∞–µ–º –µ—Å—Ç—å –∏–ª–∏ —É–±–µ–≥–∞—Ç—å
  if (nearestEnemy?.entity?.isValid) {
    const enemy = nearestEnemy.entity
    const distanceToEnemy = botPos.distanceTo(enemy.position)

    // –í—Ä–∞–≥ –±–ª–∏–∑–∫–æ - —É–±–µ–≥–∞–µ–º
    if (distanceToEnemy < preferences.safeEatDistance) {
      bot.chat('–ù–µ –º–æ–≥—É –ø–æ–µ—Å—Ç—å, –≤—Ä–∞–≥–∏ —Ä—è–¥–æ–º!')
      console.log('‚ö†Ô∏è –ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–µ—Å—Ç—å, –≤—Ä–∞–≥–∏ —Ä—è–¥–æ–º')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ —É–±–µ–∂–∞—Ç—å –∫ –∏–≥—Ä–æ–∫—É
      if (canFleeToPlayer(enemy)) {
        fleeToPlayer()
        return
      }

      // –ò–Ω–∞—á–µ —É–±–µ–≥–∞–µ–º –æ—Ç –≤—Ä–∞–≥–∞
      fleeFromEnemy(enemy)
      return
    }
  }

  // –í—Ä–∞–≥ –¥–∞–ª–µ–∫–æ –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç - –µ–¥–∏–º
  console.log('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å –∏ –µ–º')
  bot.pathfinder.setGoal(null)
  bot.utils.eating()
}

const entryDefenging = ({ context, event }) => {
  console.log('‚öîÔ∏è –í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DEFENDING')
}

const entryMeleeAttacking = raise(({ context: { bot, nearestEnemy }, event }) => {
  console.log('‚öîÔ∏è –í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ MELEE_ATTACKING')

  if (!nearestEnemy?.entity?.isValid) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–ù–ê–ß–ê–õ–ê
    console.log('‚öîÔ∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –¥–ª—è –∞—Ç–∞–∫–∏')
    return { type: 'NO_ENEMIES' }
  }

  const { entity } = nearestEnemy

  const meleeWeapon = bot.utils.getMeleeWeapon() // –ø–æ–∏—Å–∫ –æ—Ä—É–∂–∏—è –º–µ—á/—Ç–æ–ø–æ—Ä
  if (meleeWeapon) {
    console.log(`üó°Ô∏è –≠–∫–∏–ø–∏—Ä–æ–≤–∞–ª –æ—Ä—É–∂–∏–µ: ${meleeWeapon.name}`)
    bot.equip(meleeWeapon, 'hand')
  } else {
    console.log('üó°Ô∏è –ù–µ—Ç –æ—Ä—É–∂–∏—è –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è‚ùó')
  }

  console.log(`‚öîÔ∏è –ê—Ç–∞–∫—É—é ${entity.name || entity.displayName}`)

  bot.pvp.attack(entity)

  return {}
})

const entryRangedAttacking = raise(({ context: { bot, nearestEnemy }, event }) => {
  console.log('‚öîÔ∏è –í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RANGED_ATTACKING')
  if (!nearestEnemy?.entity?.isValid) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–ù–ê–ß–ê–õ–ê
    console.log('‚öîÔ∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –¥–ª—è –∞—Ç–∞–∫–∏')
    return { type: 'NO_ENEMIES' }
  }

  const { entity } = nearestEnemy

  console.log(`üèπ –ù–∞—á–∏–Ω–∞—é –¥–∞–ª—å–Ω–∏–π –±–æ–π —Å ${entity.name || entity.displayName}`)

  const weapon = bot.utils.getRangeWeapon() // –ø–æ–∏—Å–∫ –æ—Ä—É–∂–∏—è –ª—É–∫/–∞—Ä–±–∞–ª–µ—Ç
  const arrows = bot.utils.getArrow()

  if (weapon && arrows) {
    bot.equip(weapon, 'hand')
    console.log(`üèπ –≠–∫–∏–ø–∏—Ä–æ–≤–∞–ª: ${weapon.name}`)
    bot.hawkEye.autoAttack(entity, weapon.name)
  } else {
    return { type: 'ENEMY_BECAME_CLOSE' }
  }

  return {}
})

export default {
  entryCombat,
  entryDeciding,
  entryFleeing,
  entryDefenging,
  entryMeleeAttacking,
  entryRangedAttacking,
}