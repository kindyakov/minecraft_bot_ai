import { createStatefulService } from "./base/createStatefulService.js"
import { GoalXZ, GoalNear } from "../../modules/plugins/goals.js"

const serviceEmergencyHealing = createStatefulService({
  name: 'EmergencyHealing',
  tickInterval: 1000,

  initialState: {
    isEating: false,
    lastFleeTime: 0
  },

  onStart: ({ bot }) => {
    console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ó–î–û–†–û–í–¨–ï! –†–µ–∂–∏–º –≤—ã–∂–∏–≤–∞–Ω–∏—è')
    bot.chat('–ú–Ω–µ –ø–ª–æ—Ö–æ! –ù—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ –≤—ã–ª–µ—á–∏—Ç—å—Å—è!')

    if (bot.movements) {
      bot.movements.allowSprinting = true
    }
  },

  onTick: ({ bot, context, state, sendBack, setState }) => {
    const { health, preferences, position, enemies, nearestEnemy } = context

    // 1. –ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –≤—ã—Ö–æ–¥–∏–º
    if (health > preferences.healthFullyRestored) {
      console.log('üíö –ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
      bot.utils.stopEating()
      sendBack({ type: 'HEALTH_RESTORED' })
      return
    }

    // 2. –ù–µ—Ç –≤—Ä–∞–≥–æ–≤ - –º–æ–∂–Ω–æ –ª–µ—á–∏—Ç—å—Å—è –Ω–∞ –º–µ—Å—Ç–µ
    if (enemies.length === 0) {
      console.log('‚úÖ –í—Ä–∞–≥–æ–≤ –Ω–µ—Ç, –ª–µ—á—É—Å—å –Ω–∞ –º–µ—Å—Ç–µ')
      bot.pathfinder.setGoal(null)
      bot.utils.eating()
      setState({ isEating: true })
      return
    }

    const hasFood = bot.utils.getAllFood().length > 0

    if (!hasFood) {
      console.log('‚ö†Ô∏è –ù–ï–¢ –ï–î–´! –ü—Ä–æ—Å—Ç–æ —É–±–µ–≥–∞—é')
      bot.chat('–£ –º–µ–Ω—è –Ω–µ—Ç –µ–¥—ã! –ü–æ–º–æ–≥–∏—Ç–µ!')
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º: –º–æ–∂–Ω–æ –ª–∏ —É–±–µ–∂–∞—Ç—å –∫ –∏–≥—Ä–æ–∫—É
    const player = bot.utils.searchPlayer()
    const canFleeToPlayer = player && (() => {
      const playerPos = player.position
      const playerToBotDist = playerPos.distanceTo(position)

      // –ò–≥—Ä–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
      if (playerToBotDist > preferences.fleeToPlayerRadius) {
        return false
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –≤—Ä–∞–≥–∏ –¥–∞–ª–µ–∫–æ –æ—Ç –∏–≥—Ä–æ–∫–∞
      const allEnemiesFarFromPlayer = enemies.every(enemy => {
        const distToPlayer = enemy.position.distanceTo(playerPos)
        return distToPlayer > preferences.safePlayerDistance
      })

      return allEnemiesFarFromPlayer
    })()

    // 4. –í—Ä–∞–≥ –û–ß–ï–ù–¨ –±–ª–∏–∑–∫–æ - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –±–µ–∂–∏–º
    if (nearestEnemy.distance < preferences.safeEatDistance) {
      console.log(`üèÉ –í—Ä–∞–≥ –ë–õ–ò–ó–ö–û (${nearestEnemy.distance.toFixed(1)}–º)!`)

      bot.utils.stopEating()
      setState({ isEating: false })

      if (canFleeToPlayer) {
        console.log(`üèÉ‚Äç‚ôÇÔ∏è –ë–µ–≥—É –∫ –∏–≥—Ä–æ–∫—É "${player.username}"`)
        bot.chat(`${player.username}, —Å–ø–∞—Å–∏ –º–µ–Ω—è!`)
        bot.pathfinder.setGoal(new GoalNear(
          player.position.x,
          player.position.y,
          player.position.z,
          3
        ))
      } else {
        // –£–±–µ–≥–∞–µ–º –æ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–≥–∞
        const enemyPos = nearestEnemy.entity.position
        const direction = position.clone().subtract(enemyPos).normalize()
        const fleeTarget = position.clone().add(direction.scaled(preferences.fleeTargetDistance))

        bot.pathfinder.setGoal(new GoalXZ(
          Math.floor(fleeTarget.x),
          Math.floor(fleeTarget.z),
        ))
      }

      setState({ lastFleeTime: Date.now() })
      return
    }

    // 5. –í—Ä–∞–≥–∏ –¥–∞–ª–µ–∫–æ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –∏ –ª–µ—á–∏–º—Å—è
    console.log(`‚úÖ –í—Ä–∞–≥–∏ –¥–∞–ª–µ–∫–æ (${nearestEnemy.distance.toFixed(1)}–º), –ª–µ—á—É—Å—å`)
    bot.pathfinder.setGoal(null)
    bot.utils.eating()
    setState({ isEating: true })
  },
})

export default {
  serviceEmergencyHealing
}