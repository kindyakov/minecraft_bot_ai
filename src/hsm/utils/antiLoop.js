export class AntiLoopGuard {
  constructor(options = {}) {
    this.maxTransitionsPerSecond = options.maxTransitionsPerSecond || 15
    this.emergencyStopAfter = options.emergencyStopAfter || 100
    this.windowMs = options.windowMs || 1000

    this.transitionHistory = []
    this.totalTransitions = 0
    this.emergencyStopped = false
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ
   * @returns {boolean} true –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –±–µ–∑–æ–ø–∞—Å–µ–Ω, false –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
   */
  recordTransition(fromState, toState) {
    if (this.emergencyStopped) {
      return false
    }

    const now = Date.now()
    const transition = { from: fromState, to: toState, timestamp: now }

    this.transitionHistory.push(transition)
    this.totalTransitions++

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —Å–µ–∫—É–Ω–¥—ã)
    this.transitionHistory = this.transitionHistory.filter(
      t => now - t.timestamp < this.windowMs
    )

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–∫—É–Ω–¥—É
    if (this.transitionHistory.length > this.maxTransitionsPerSecond) {
      console.warn(`‚ö†Ô∏è WARNING: ${this.transitionHistory.length} transitions in ${this.windowMs}ms`)
      console.warn('Recent transitions:', this.transitionHistory.slice(-5).map(t => `${t.from} ‚Üí ${t.to}`))

      // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
      if (this.transitionHistory.length > this.maxTransitionsPerSecond * 2) {
        this.emergencyStop('Too many transitions per second')
        return false
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –¥–æ—Å—Ç–∏–≥–ª–æ –ª–∏–º–∏—Ç–∞
    if (this.totalTransitions >= this.emergencyStopAfter) {
      this.emergencyStop('Total transition limit reached')
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ A‚ÜíB‚ÜíA‚ÜíB (–ø–∏–Ω–≥-–ø–æ–Ω–≥)
    if (this.detectPingPong()) {
      this.emergencyStop('Ping-pong loop detected')
      return false
    }

    return true
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω A‚ÜíB‚ÜíA‚ÜíB (–ø–∏–Ω–≥-–ø–æ–Ω–≥ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏)
   */
  detectPingPong() {
    const recent = this.transitionHistory.slice(-6)
    if (recent.length < 4) return false

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω A‚ÜíB‚ÜíA‚ÜíB
    const pattern = recent.slice(-4)
    const isPingPong = (
      pattern[0].from === pattern[2].from &&
      pattern[0].to === pattern[2].to &&
      pattern[1].from === pattern[3].from &&
      pattern[1].to === pattern[3].to &&
      pattern[0].from === pattern[1].to &&
      pattern[0].to === pattern[1].from
    )

    if (isPingPong) {
      console.error('üîÅ Ping-pong detected:',
        pattern.map(t => `${t.from} ‚Üí ${t.to}`).join(' | ')
      )
    }

    return isPingPong
  }

  /**
   * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—à–∏–Ω—ã
   */
  emergencyStop(reason) {
    this.emergencyStopped = true
    console.error('')
    console.error('‚ïê'.repeat(60))
    console.error('üö® EMERGENCY STOP ACTIVATED üö®')
    console.error('‚ïê'.repeat(60))
    console.error(`Reason: ${reason}`)
    console.error(`Total transitions: ${this.totalTransitions}`)
    console.error('')
    console.error('Last 20 transitions:')
    this.transitionHistory.slice(-20).forEach((t, i) => {
      const time = new Date(t.timestamp).toISOString().split('T')[1]
      console.error(`  ${i + 1}. [${time}] ${t.from} ‚Üí ${t.to}`)
    })
    console.error('‚ïê'.repeat(60))
  }

  /**
   * –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
   */
  reset() {
    this.transitionHistory = []
    this.totalTransitions = 0
    this.emergencyStopped = false
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  getStats() {
    return {
      transitionsInLastSecond: this.transitionHistory.length,
      totalTransitions: this.totalTransitions,
      emergencyStopped: this.emergencyStopped,
      recentTransitions: this.transitionHistory.slice(-10)
    }
  }
}