export class BotUtils {
  constructor(bot) {
    this._bot = bot // –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    this.lastMovingAt = Date.now()
    this._eatingTimeoutId = null // —Ç–∞–π–º–µ—Ä –¥–ª—è –∫—É—à–∞–Ω–∏—è

    this._shootTimeoutId = null // —Ç–∞–π–º–µ—Ä –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã
    this._shootAbortController = new AbortController()
  }

  /**
 * –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–∂–¥–µ–±–Ω–æ–≥–æ –º–æ–±–∞
 * @param {number} maxDistance - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –ø–æ–∏—Å–∫–∞
 * @returns {Object|null} –≤—Ä–∞–∂–¥–µ–±–Ω—ã–π –º–æ–± –∏–ª–∏ null
 */
  findNearestEnemy(maxDistance = 15, filter = null) {
    const baseFilter = (entity) => {
      if (!entity || entity.type !== 'hostile') return false

      const botY = this._bot.entity.position.y
      const entityY = entity.position.y
      const yDiff = Math.abs(botY - entityY)

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É (–±—ã—Å—Ç—Ä–µ–µ), –ø–æ—Ç–æ–º –æ–±—â—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
      return yDiff <= 8 &&
        this._bot.entity.position.distanceTo(entity.position) <= maxDistance
    }

    const combined = typeof filter === 'function'
      ? (e) => baseFilter(e) && filter(e)
      : baseFilter

    return this._bot.nearestEntity(combined)
  }

  /**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 * @param {number} threshold - –ø–æ—Ä–æ–≥ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª–Ω—ã–π)
 * @returns {boolean} true –µ—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–ø–æ–ª–Ω–µ–Ω
 */
  isInventoryFull(threshold = 36) {
    return this._bot.inventory.items().length >= threshold
  }

  /**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –µ–¥—ã
 * @param {number} threshold - –ø–æ—Ä–æ–≥ –≥–æ–ª–æ–¥–∞
 * @returns {boolean} true –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –µ—Å—Ç—å
 */
  needsFood(threshold = 17) {
    return this._bot.food <= threshold
  }

  /**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–µ—á–µ–Ω–∏—è
 * @param {number} health - –ø–æ—Ä–æ–≥ –∑–¥–æ—Ä–æ–≤—å—è
 * @returns {boolean} true –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ª–µ—á–µ–Ω–∏–µ
 */
  needsHealing(health = 15) {
    return this._bot.health <= health
  }

  /**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–µ—á–µ–Ω–∏—è
 * @param {number} saturation - –ø–æ—Ä–æ–≥ —Å—ã—Ç–æ—Å—Ç–∏
 * @returns {boolean} true –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –µ—Å—Ç—å
 */
  needsSaturation(saturation = 1) {
    return this._bot.foodSaturation < saturation
  }

  /**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ
 * @param {number} timeout - —Ç–∞–π–º–∞—É—Ç –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
 * @returns {boolean} true –µ—Å–ª–∏ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
 */
  isStuck(timeout = 3000) {
    if (this._bot.pathfinder.isMoving()) {
      this.lastMovingAt = Date.now()
      this.lastPosition = this._bot.entity.position.clone()
      return false
    }

    // –ï—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –¥–≤–∏–≥–∞–ª—Å—è - –Ω–µ –∑–∞—Å—Ç—Ä—è–ª
    if (Date.now() - this.lastMovingAt < timeout) return false

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    if (!this.lastPosition) {
      this.lastPosition = this._bot.entity.position.clone()
      return false
    }

    const moved = this._bot.entity.position.distanceTo(this.lastPosition)
    return moved < 0.5 // –∑–∞—Å—Ç—Ä—è–ª –µ—Å–ª–∏ —Å–¥–≤–∏–Ω—É–ª—Å—è –º–µ–Ω—å—à–µ —á–µ–º –Ω–∞ 0.5 –±–ª–æ–∫–∞
  }

  /**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–∏—Ç–∞–Ω–∏—è
 * @param {Object} thresholds - –ø–æ—Ä–æ–≥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–∏—Ç–∞–Ω–∏—è
 */
  needsToEat(thresholds = { food: 17, health: 15, saturation: 5 }) {
    const currentFood = this._bot.food
    const currentHealth = this._bot.health
    const currentSaturation = this._bot.foodSaturation

    const result = {
      shouldEat: false,
      reasons: [],
      priority: 'none', // 'low', 'medium', 'high', 'critical'
      stats: {
        food: currentFood,
        health: currentHealth,
        saturation: currentSaturation
      }
    }

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –∑–¥–æ—Ä–æ–≤—å–µ –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ
    if (currentHealth <= 6) {
      result.shouldEat = true
      result.priority = 'critical'
      result.reasons.push('–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ')
      return result
    }

    // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –Ω–∏–∑–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ + –Ω–∏–∑–∫–æ–µ –Ω–∞—Å—ã—â–µ–Ω–∏–µ
    if (currentHealth <= thresholds.health && currentSaturation < thresholds.saturation) {
      result.shouldEat = true
      result.priority = 'high'
      result.reasons.push('–Ω–∏–∑–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –Ω–∞—Å—ã—â–µ–Ω–∏–µ')
      return result
    }

    // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –ø—Ä–æ—Å—Ç–æ –≥–æ–ª–æ–¥
    if (currentFood <= thresholds.food) {
      result.shouldEat = true
      result.priority = 'medium'
      result.reasons.push('–≥–æ–ª–æ–¥')
      return result
    }

    // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Ç–æ–ª—å–∫–æ –Ω–∞—Å—ã—â–µ–Ω–∏–µ
    if (currentSaturation < thresholds.saturation) {
      result.shouldEat = true
      result.priority = 'low'
      result.reasons.push('–Ω–∏–∑–∫–æ–µ –Ω–∞—Å—ã—â–µ–Ω–∏–µ')
    }

    return result
  }

  /**
 * –ü–æ–∏—Å–∫ –æ—Ä—É–∂–∏—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
 * @returns {Object|null} –æ—Ä—É–∂–∏–µ –∏–ª–∏ null
 */
  getMeleeWeapon() {
    const weaponItems = [
      'netherite_sword', // –Ω–µ–∑–µ—Ä–∏—Ç–æ–≤—ã–π –º–µ—á
      'netherite_axe',   // –Ω–µ–∑–µ—Ä–∏—Ç–æ–≤—ã–π —Ç–æ–ø–æ—Ä
      'diamond_sword',   // –∞–ª–º–∞–∑–Ω—ã–π –º–µ—á
      'diamond_axe',     // –∞–ª–º–∞–∑–Ω—ã–π —Ç–æ–ø–æ—Ä
      'iron_sword',      // –∂–µ–ª–µ–∑–Ω—ã–π –º–µ—á
      'iron_axe',        // –∂–µ–ª–µ–∑–Ω—ã–π —Ç–æ–ø–æ—Ä
      'golden_sword',    // –∑–æ–ª–æ—Ç–æ–π –º–µ—á
      'golden_axe',      // –∑–æ–ª–æ—Ç–æ–π —Ç–æ–ø–æ—Ä
      'stone_sword',     // –∫–∞–º–µ–Ω–Ω—ã–π –º–µ—á
      'stone_axe',       // –∫–∞–º–µ–Ω–Ω—ã–π —Ç–æ–ø–æ—Ä
      'wooden_sword',    // –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á
      'wooden_axe',      // –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π —Ç–æ–ø–æ—Ä
    ]
    let weapon = null

    for (const name of weaponItems) {
      weapon = this._bot.inventory.items().find(item => item.name === name)
      if (weapon) {
        break
      }
    }

    return weapon
  }

  getRangeWeapon() {
    return this._bot.inventory.items().find(item =>
      item.name.includes('bow') || item.name.includes('crossbow')
    )
  }

  getArrow() {
    return this._bot.inventory.items().find(item => item.name.includes('arrow'))
  }

  searchPlayer(playerName = '') {
    return this._bot.nearestEntity(e => e.name === playerName || e.type === 'player')
  }

  getAllItems() {
    const items = this._bot.inventory.items()

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ offhand –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const offhandItem = this._bot.inventory.slots[45]
    if (this._bot.registry.isNewerOrEqualTo('1.9') && offhandItem) {
      items.push(offhandItem)
    }

    return items
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ–¥—ã –≤–∫–ª—é—á–∞—è offhand
  getAllFood() {
    return this.getAllItems()
      .filter(item => this._bot.autoEat.foodsByName[item.name])
      .filter(item => !this._bot.autoEat.opts.bannedFood.includes(item.name))
  }

  // –î–ª—è –µ–¥—ã
  async eating() {
    if (!this._bot || this._bot?.health === 20) {
      this.stopEating()
      return
    }

    try {
      if (this._bot.food >= 20) {
        console.log('–ì–æ–ª–æ–¥ –ø–æ–ª–Ω—ã–π, –∂–¥—É —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è...')
        this.stopEating() // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
        this._eatingTimeoutId = setTimeout(() => {
          this.eating()
        }, 1500)
        return
      }

      console.log('–ò—â—É –µ–¥—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ...')

      const allItems = this._bot.utils.getAllItems()
      const foodChoices = this._bot.autoEat.findBestChoices(allItems, 'saturation')

      if (!foodChoices.length) {
        this._bot.chat('–ù–µ—Ç –µ–¥—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è!')
        return
      }

      const bestFood = foodChoices[0]
      console.log(`–í—ã–±—Ä–∞–ª –µ–¥—É: ${bestFood.name}`)

      await this._bot.equip(bestFood, 'hand')

      console.log('–ù–∞—á–∏–Ω–∞—é –µ—Å—Ç—å...')
      await this._bot.consume()

      console.log(`–ü–æ–µ–ª! HP: ${this._bot.health.toFixed(1)}, Food: ${this._bot.food}, Saturation: ${this._bot.foodSaturation.toFixed(1)}`)

      if (this._bot.health < 20) {
        this.stopEating()
        this._eatingTimeoutId = setTimeout(() => {
          this.eating()
        }, 1500)
      }
    } catch (error) {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–¥–µ: ${error.message}`)
      if (this._bot.health < 20) {
        this.stopEating()
        this._eatingTimeoutId = setTimeout(() => {
          this.eating()
        }, 1500)
      }
    }
  }

  stopEating() {
    if (this._eatingTimeoutId) {
      clearTimeout(this._eatingTimeoutId)
      this._eatingTimeoutId = null
    }
  }

  async shoot({ entity, weapon }) {
    try {
      if (this._shootAbortController.signal.aborted) {
        console.log('üèπ –°—Ç—Ä–µ–ª—å–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
        return
      }

      if (!entity.isValid) {
        console.log('üèπ –¶–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞')
        return
      }

      await this._bot.lookAt(entity.position, true) // –ü—Ä–∏—Ü–µ–ª–∏–≤–∞–µ–º—Å—è

      if (this._shootAbortController.signal.aborted) return

      this._bot.activateItem() // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Ç—è–≥–∏–≤–∞—Ç—å —Ç–µ—Ç–∏–≤—É

      // –í—Ä–µ–º—è –Ω–∞—Ç—è–∂–µ–Ω–∏—è (–¥–ª—è –ª—É–∫–∞ ~1000ms, –¥–ª—è –∞—Ä–±–∞–ª–µ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∞—Ä–æ–≤)
      const chargeTime = weapon.name.includes('crossbow') ? 1250 : 1000
      await new Promise((resolve, reject) => {
        const timeout = setTimeout(resolve, chargeTime)

        // –°–ª—É—à–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã
        this._shootAbortController.signal.addEventListener('abort', () => {
          clearTimeout(timeout)
          this._bot.deactivateItem() // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –Ω–∞—Ç—è–∂–µ–Ω–∏–µ
          reject(new Error('Shooting aborted'))
        })
      })

      if (this._shootAbortController.signal.aborted) return

      this._bot.deactivateItem() // –û—Ç–ø—É—Å–∫–∞–µ–º = –≤—ã—Å—Ç—Ä–µ–ª!
      console.log('üèπ –í—ã—Å—Ç—Ä–µ–ª–∏–ª!')

      this._shootTimeoutId = setTimeout(() => {
        this._shootTimeoutId = null
        if (!this._shootAbortController.signal.aborted) {
          this.shoot({ entity, weapon })
        }
      }, 500)
    } catch (error) {
      if (error.message === 'Shooting aborted') {
        console.log('üèπ –°—Ç—Ä–µ–ª—å–±–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞')
      } else {
        console.log(`üèπ –û—à–∏–±–∫–∞ —Å—Ç—Ä–µ–ª—å–±—ã: ${error.message}`)
      }
    }
  }

  stopShoot() {
    console.log('üèπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ç—Ä–µ–ª—å–±—É')

    this._shootAbortController.abort()

    if (this._shootTimeoutId) {
      clearTimeout(this._shootTimeoutId)
      this._shootTimeoutId = null
    }

    this._shootAbortController = new AbortController()
  }
}